# This is a basic workflow to help you get started with Actions

name: Create thermals.mbtiles + thermals.brokjson.zip

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    paths:
      - 'thermals.geojson'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  project_id: igcheatmap

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_mbtiles:
    if: ${{ github.ref == 'refs/heads/master' }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Clone this repo + thermalmap-tippecanoe repo 
        uses: actions/checkout@v3
      
      # This part here is cloning a second repository
      # While cloning the repository:
      #   - it clones the repo into the given `path`
      #   - it checks out the branch defined at `ref`
      - name: Clone thermalmap-tippecanoe repo
        uses: actions/checkout@v2
        with:
          repository: llauner/thermalmap-tippecanoe
          path: ./tippecanoe
          ref: master

      # Install tippecanoe
      - name: Install tippecanoe
        run: |
          cd tippecanoe
          sudo make -j
          sudo make install

      # List .geojson files
      - name: List geojson files
        id: list_files
        uses: Rishabh510/Path-lister-action@master
        with:
          path: "./"
          type: ".geojson"

      - name: Output results
        run: |
          echo "Found ${{ steps.list_files.outputs.path_count }} file(s) with this extension:"
          for i in ${{ steps.list_files.outputs.paths }}; do
          echo $i
          done

      # Runs tippecannoe
      - name: Run tippecanoe to generate tiles
        run: |
          for f in ${{ steps.list_files.outputs.paths }}; do
          echo "Converting...: $f"
          tippecanoe -r1 -z12 --progress-interval=20 --drop-densest-as-needed --extend-zooms-if-still-dropping  -o ${FILE%%.*}.mbtiles f --force
          
          #tippecanoe -r1 -z12 --progress-interval=20 --drop-densest-as-needed --extend-zooms-if-still-dropping  -o thermals.mbtiles thermals.geojson --force
     
      # Push changes to repo    
      - name: Push changes into repo
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automated Change
          file_pattern: '*.mbtiles'

  build_brokjson:
    needs: [build_mbtiles]
    name: Build brokjson file from geojson
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest

    steps:
      - name: Install Zip
        run: |
          sudo apt install zip

      - name: Clone thermal_map
        uses: actions/checkout@v3
        with:
          repository: llauner/thermal_map
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: ./thermal_map
          ref: master

      - name: Clone thermalmap-geojson-data repo
        uses: actions/checkout@v3
        with:
          path: ./thermalmap-geojson-data
          ref: master
          
      - uses: actions/setup-python@v4
        with:
            python-version: 3.7

      - name: Install thermal_map and create thermals.brokjson.zip
        run: |
          cd ./thermal_map
          python -VV
          pip install -r requirements_main.txt
          python main_geojson2brokjson.py ../thermalmap-geojson-data/thermals.geojson ../thermalmap-geojson-data/thermals.brokjson
          zip ../thermalmap-geojson-data/thermals.brokjson.zip ../thermalmap-geojson-data/thermals.brokjson
          cd ../thermalmap-geojson-data

      # Push changes to repo    
      - name: Push changes into repo
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          repository: ./thermalmap-geojson-data
          commit_message: Automated Change
          file_pattern: 'thermals.brokjson.zip'


  push-event-to-other-repo:
    needs: [build_mbtiles, build_brokjson]
    name: Dispatch to other repo= thermalmap-tilehut-server
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Emit repository_dispatch
        uses: mvasigh/dispatch-action@main
        with:
          # You should create a personal access token and store it in your repository
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repo: thermalmap-tilehut-server
          owner: llauner
          event_type: external_push_mbtiles_created
    
